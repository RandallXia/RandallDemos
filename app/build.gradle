import com.randallpt.versionplugin.*

plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'kotlin-android'
    id 'kotlin-kapt'
}

android {
    namespace 'com.randalldev.demos'
    compileSdk BuildConfig.compileSdkVersion

    defaultConfig {
        minSdk BuildConfig.minSdkVersion
        targetSdk BuildConfig.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildFeatures {
        viewBinding true
    }

    signingConfigs {
        release {
            v1SigningEnabled true
            v2SigningEnabled true
            storeFile file('../PT_Base_Lib/randallpt.keystore')
            storePassword System.getenv("ANDROID_KEYSTORE_PASS")
            keyAlias System.getenv("ANDROID_KEY_ALIAS")
            keyPassword System.getenv("ANDROID_KEY_PASS")
        }
    }

    buildTypes {
        release {
            signingConfig signingConfigs.release
            minifyEnabled true
            // 移除无用的resource文件
            shrinkResources true
            debuggable false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }

        debug {
            signingConfig signingConfigs.release
            minifyEnabled false
            debuggable true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_17
        targetCompatibility JavaVersion.VERSION_17
    }
    kotlinOptions {
        jvmTarget = '17'
    }
    lint {
        lintConfig = file("android-lint.xml")
    }
}

dependencies {

    implementation project(':PT_Base_Lib:architecture')
    implementation project(':injectaweme')
    implementation project(':palm2-android')
    implementation project(':fiteditor')

    testImplementation Depend.junit
    androidTestImplementation Depend.androidTestJunit
    androidTestImplementation Depend.espressoCore

    implementation AndroidX.activityKtx
    implementation AndroidX.fragmentKtx
    implementation AndroidX.ktxReflect
    implementation AndroidX.lifecycleLiveData
    implementation AndroidX.lifecycleViewModel
    implementation AndroidX.paging
    implementation Kt.coroutinesCore
    implementation Kt.coroutinesAndroid
    implementation Kt.coroutinesRetrofit
    // DI
    implementation Hilt.dagger
    kapt Hilt.daggerCompiler
    implementation Hilt.viewModel
    kapt Hilt.compiler

    kapt Moshi.codegen

    kapt Glide.compiler
}